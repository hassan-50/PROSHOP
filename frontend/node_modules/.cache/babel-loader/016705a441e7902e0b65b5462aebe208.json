{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/ProShop/frontend/src/actions/userAction.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,EAAkEC,WAAlE,EAA+EC,kBAA/E,EAAmGC,qBAAnG,EAA0HC,qBAA1H,QAAuJ,4BAAvJ;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAASC,QAAT,KAAsB,MAAOC,QAAP,IAAqB;AAChE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACV;AAAN,KAAD,CAAR;AAEA,QAAIW,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAC;AAAC,wBAAgB;AAAjB;AADC,KAAb;AAGA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAW,kBAAX,EAA8B;AAACP,MAAAA,KAAD;AAASC,MAAAA;AAAT,KAA9B,EAAmDG,MAAnD,CAArB;AAEAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,kBADD;AAELc,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAIQG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACX,GAbD,CAaE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGX,eADF;AACoBgB,MAAAA,OAAO,EAAGK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AADlH,KAAD,CAAR;AAGH;AACA,CAnBM;AAqBP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOd,QAAP,IAAqB;AACjDO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAGR;AAAR,GAAD,CAAR;AACC,CAHM;AAKP,OAAO,MAAMuB,QAAQ,GAAG,CAACC,IAAD,EAAQnB,KAAR,EAAgBC,QAAhB,KAA6B,MAAOC,QAAP,IAAqB;AACtE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACN;AAAN,KAAD,CAAR;AAEA,QAAIO,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAC;AAAC,wBAAgB;AAAjB;AADC,KAAb;AAGA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAW,kBAAX,EAA8B;AAACY,MAAAA,IAAD;AAAOnB,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAA9B,EAAwDG,MAAxD,CAArB;AAEAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,qBADD;AAELU,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAIQG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACX,GAbD,CAaE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGP,kBADF;AACuBY,MAAAA,OAAO,EAAGK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AADrH,KAAD,CAAR;AAGH;AACA,CAnBE","sourcesContent":["import axios from 'axios'\r\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from '../constants/userConstants'\r\nexport const login = (email , password) => async (dispatch) =>  {\r\ntry {\r\n    dispatch({type:USER_LOGIN_REQUEST})\r\n    \r\n    var config = {\r\n        headers:{'Content-Type': 'application/json'}\r\n    }\r\n    const {data} = await axios.post('/api/users/login',{email , password} , config)\r\n\r\n    dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload:data\r\n            })\r\n            localStorage.setItem('userInfo',JSON.stringify(data))\r\n} catch (error) {\r\n    dispatch({\r\n        type : USER_LOGIN_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n    })\r\n}\r\n}\r\n\r\nexport const logout = () => async (dispatch) =>  {\r\nlocalStorage.removeItem('userInfo')\r\ndispatch({type : USER_LOGOUT})\r\n}\r\n\r\nexport const register = (name , email , password) => async (dispatch) =>  {\r\n    try {\r\n        dispatch({type:USER_REGISTER_REQUEST})\r\n        \r\n        var config = {\r\n            headers:{'Content-Type': 'application/json'}\r\n        }\r\n        const {data} = await axios.post('/api/users/login',{name ,email, password} , config)\r\n    \r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload:data\r\n                })\r\n                localStorage.setItem('userInfo',JSON.stringify(data))\r\n    } catch (error) {\r\n        dispatch({\r\n            type : USER_REGISTER_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n        })\r\n    }\r\n    }"]},"metadata":{},"sourceType":"module"}