{"ast":null,"code":"import axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    var config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/ProShop/frontend/src/actions/userAction.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from '../constants/userConstants'\r\nexport const login = (email , password) => async (dispatch) =>  {\r\ntry {\r\n    dispatch({type:USER_LOGIN_REQUEST})\r\n    \r\n    var config = {\r\n        headers:{'Content-Type': 'application/json'}\r\n    }\r\n    const {data} = await axios.post('/api/users/login',{email , password} , config)\r\n\r\n    dispatch({\r\n        type: USER_LOGIN_SUCCESS,\r\n        payload:data\r\n            })\r\n            localStorage.setItem('userInfo',JSON.stringify(data))\r\n} catch (error) {\r\n    dispatch({\r\n        type : USER_LOGIN_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n    })\r\n}\r\n}\r\n\r\nexport const logout = () => async (dispatch) =>  {\r\nlocalStorage.removeItem('userInfo')\r\ndispatch({type : USER_LOGOUT})\r\n}\r\n\r\nexport const register = (name , email , password) => async (dispatch) =>  {\r\n    try {\r\n        dispatch({type:USER_REGISTER_REQUEST})\r\n        \r\n        var config = {\r\n            headers:{'Content-Type': 'application/json'}\r\n        }\r\n        const {data} = await axios.post('/api/users',{name ,email, password} , config)\r\n    \r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload:data\r\n                })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:data\r\n                })\r\n                localStorage.setItem('userInfo',JSON.stringify(data))\r\n    } catch (error) {\r\n        dispatch({\r\n            type : USER_REGISTER_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n        })\r\n    }\r\n    }\r\n\r\n    export const getUserDetails = (id) => async (dispatch , getState) =>  {\r\n        try {\r\n            dispatch({type:USER_DETAILS_REQUEST})\r\n            \r\n            const {userLogin : {userInfo}} = getState()\r\n            var config = {\r\n                headers:{'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n            }\r\n            const {data} = await axios.get(`/api/users/${id}` , config)\r\n        \r\n            dispatch({\r\n                type: USER_DETAILS_SUCCESS,\r\n                payload:data\r\n                    })\r\n        } catch (error) {\r\n            dispatch({\r\n                type : USER_DETAILS_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n            })\r\n        }\r\n        }\r\n\r\n        export const updateUserProfile = (user) => async (dispatch , getState) =>  {\r\n            try {\r\n                dispatch({type:USER_UPDATE_PROFILE_REQUEST})\r\n                \r\n                const {userLogin : {userInfo}} = getState()\r\n                var config = {\r\n                    headers:{'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                },\r\n                }\r\n                const {data} = await axios.put(`/api/users/profile` ,user, config)\r\n            \r\n                dispatch({\r\n                    type: USER_UPDATE_PROFILE_SUCCESS,\r\n                    payload:data\r\n                        })\r\n            } catch (error) {\r\n                dispatch({\r\n                    type : USER_UPDATE_PROFILE_FAIL , payload : error.response && error.response.data.message ? error.response.data.message : error.message \r\n                })\r\n            }\r\n            }"]},"metadata":{},"sourceType":"module"}